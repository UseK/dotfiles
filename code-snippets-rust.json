{
	// Place your snippets for rust here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"main": {
		"prefix": "main",
		"body": "fn main() {\n    $0\n}",
		"description": "main function",
	},
	"debug": {
		"prefix": "d",
		"body": "println!(\"{:#?}\", $0);",
		"description": "debug print",
	},
	"degug vec": {
		"prefix": ".dv",
		"body": ".iter().for_each(|item| println!(\"{:#?}\", item));"
	},
	"degug vec with d!": {
		"prefix": ".dd",
		"body": ".iter().for_each(|item| d!(item);"
	},
	"println": {
		"prefix": "p",
		"body": "println!(\"{}\", $0);",
		"description": "println",
	},
	"test": {
		"prefix": "test",
		"body": [
			"#[cfg(test)]",
			"mod tests {",
			"    #[test]",
			"    fn test() {",
			"        assert_eq!(true, true);",
			"    }",
			"}",
		]
	},
	"dmacro": {
		"prefix": "dmacro",
		"body": [
			"#[macro_export]",
			"macro_rules! d {",
			"    ( $( $x:expr ),* ) => {{",
			"        let mut s_vec = vec![];",
			"        $(",
			"            let s = format!(\"{}: { :?}\", stringify!($x), $x);",
			"            s_vec.push(s);",
			"        )*",
			"        let joined = s_vec.join(",
			");",
			"        println!(\"{}\", joined);",
			"    }}",
			"}",
		]
	}
}